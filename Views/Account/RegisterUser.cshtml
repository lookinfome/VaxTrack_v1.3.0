@model v1Remastered.Dto.UserDetailsDto_Register;

@{
    ViewBag.pageTitle = "Registeration Page".ToUpper();
    ViewBag.pageDesc = "join our community and fight with us";
    var currMonthYear = DateTime.Now.ToString("yyyy-MM-dd");
}

<div class="container">

    @if(!string.IsNullOrEmpty(ViewBag.SignUpFailedMsg))
    {
        <div id="registrationFailMsg" class="alert alert-warning" role="alert">
            <div class="alert"> @ViewBag.SignUpFailedMsg </div>
        </div>
    }

    

    <div class="row justify-content-center mt-5">

        <div class="col col-lg-3 col-md-6 col-sm-12">

            <div class="page-title text-center">
                <h3> @ViewBag.pageTitle </h3>
                <span style="font-size: 16px; color: yellow;">
                    @ViewBag.pageDesc <i class="icon-handshake mx-2 fas fa-handshake"></i>
                </span>
            </div>

            <div class="register-form">
                @using(Html.BeginForm("RegisterUser", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @* user name *@
                    <div>
                        @Html.TextBoxFor(model=>model.UserName, new { @style="width:100%;", @class = "mt-4 register-input", placeholder = "Full Name" })
                        @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* user unique id *@
                    <div class="">
                        @Html.TextBoxFor(model => model.UserUid, new { @style="width:100%;", @class = "mt-4 register-input", placeholder = "Unique Aadhar Number" })
                        @Html.ValidationMessageFor(model => model.UserUid, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* user phone number *@
                    <div class="">
                        @Html.TextBoxFor(model => model.UserPhone, new { @style="width:100%;", @class = "mt-4 register-input", placeholder = "Phone Number" })
                        @Html.ValidationMessageFor(model => model.UserPhone, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* gender *@
                    <div style="color: white;" class="text-center">
                        @Html.RadioButtonFor(model => model.UserGender, "M", new { @class = "mt-4" }) Male
                        @Html.RadioButtonFor(model => model.UserGender, "F", new { @class = "mt-4 mx-2" }) Female
                        @Html.RadioButtonFor(model => model.UserGender, "O", new { @class = "mt-4 mx-2" }) Other
                        <br>
                        @Html.ValidationMessageFor(model => model.UserGender, null, new { @class = "validation-msg" }, null)
                    </div>

                    @* password *@
                    <div class="">
                        @Html.PasswordFor(model => model.UserPassword, new { @style="width:100%;", @class = "mt-4 register-input", placeholder = "Password", id = "Password" })
                        <span id="passwordStrength" class="mx-2 validation-msg"></span>
                        @Html.ValidationMessageFor(model => model.UserPassword, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* confirm password *@
                    <div class="">
                        @Html.PasswordFor(model => model.UserConfirmPassword, new { @style="width:100%;", @class = "mt-4 register-input", placeholder = "Confirm Password" })
                        @Html.ValidationMessageFor(model => model.UserConfirmPassword, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>
                    
                    @* birthdate *@
                    <div class="">
                        @Html.LabelFor(model=>model.UserBirthdate,"Date of Birth", new {@style="color:gray", @class="mt-4"})
                        @Html.TextBoxFor(model => model.UserBirthdate, new { @style="width:100%;", type = "date", max = currMonthYear, @class = "register-input", placeholder = "mm/dd/yyyy" })
                        @Html.ValidationMessageFor(model => model.UserBirthdate, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* image *@
                    <div class="">
                        @Html.LabelFor(m => m.ProfilePicture, "Upload Profile Picture", new {@style="color:gray", @class="mt-4"}) 
                        <input type="file" name="ProfilePicture" class="form-control register-input" />
                        @Html.ValidationMessageFor(m => m.ProfilePicture, null, new { @class = "mx-2 validation-msg" }, null)
                    </div>

                    @* submit *@
                    <div class="text-left">
                        <input type="submit" class="mt-4 register-submit" value="Sign Up" />
                    </div>

                }

                <div class="action-link mt-3 d-flex">
                    <p>Or already registered?</p>
                    <a style="color: lime;" class="mx-2" href="@Url.Action("LoginUser", "Account")">SignIn</a>
                </div>
                
            </div>

        </div>

    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('Password').addEventListener('input', function () {
            var password = this.value;
            var strengthLabel = document.getElementById('passwordStrength');
            var strength = getPasswordStrength(password);
            strengthLabel.textContent = strength;
            strengthLabel.style.color = getStrengthColor(strength);
            
        });

        function getPasswordStrength(password) {
            var strength = "Weak";
            var regexes = [
                /[A-Z]/, // Uppercase
                /[0-9]/, // Digit
                /[^A-Za-z0-9]/, // Non-alphanumeric
                /.{6,}/ // At least 6 characters
            ];

            var passedTests = regexes.reduce((acc, regex) => acc + regex.test(password), 0);

            switch (passedTests) {
                case 4:
                    strength = "Highly Strong";
                    break;
                case 3:
                    strength = "Strong";
                    break;
                case 2:
                    strength = "Moderate";
                    break;
                default:
                    strength = "Weak";
            }

            return strength;
        }

        function getStrengthColor(strength) {
            switch (strength) {
                case "Highly Strong":
                    return "lime";
                case "Strong":
                    return "lightgreen";
                case "Moderate":
                    return "orange";
                case "Weak":
                default:
                    return "red";
            }
        }

        document.getElementById('registrationForm').addEventListener('submit', function (e) {
            var password = document.getElementById('Password').value;
            var confirmPassword = document.getElementById('ConfirmPassword').value;
            if (password !== confirmPassword) {
                e.preventDefault();
                alert('Passwords do not match.');
            }
        });
    </script>


    <script>

        <script>
            window.onload = function() {
                setTimeout(function() {
                    var welcomeMessage = document.getElementById('registrationFailMsg');
                    if (welcomeMessage) {
                        welcomeMessage.style.display = 'none';
                    }
                }, 5000); // 5000 milliseconds = 5 seconds
            };
        </script>

    </script>
}